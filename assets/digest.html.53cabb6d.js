import{e as n}from"./app.d1ef40ff.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="\u6458\u8981\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u6458\u8981\u7B97\u6CD5" aria-hidden="true">#</a> \u6458\u8981\u7B97\u6CD5</h1><h2 id="\u6982\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u6982\u8FF0" aria-hidden="true">#</a> \u6982\u8FF0</h2><p>\u6458\u8981\u7B97\u6CD5\u53C8\u79F0<strong>\u54C8\u5E0C\u7B97\u6CD5</strong>\u3001<strong>\u6563\u5217\u7B97\u6CD5</strong>\u3002\u5B83\u901A\u8FC7\u4E00\u4E2A\u51FD\u6570\uFF0C\u628A\u4EFB\u610F\u957F\u5EA6\u7684\u6570\u636E\u8F6C\u6362\u4E3A\u4E00\u4E2A\u957F\u5EA6\u56FA\u5B9A\u7684\u6570\u636E\u4E32\uFF08\u901A\u5E38\u752816\u8FDB\u5236\u7684\u5B57\u7B26\u4E32\u8868\u793A\uFF09</p><p>\u8FD9\u4E2A\u8FC7\u7A0B\u662F\u4E0D\u53EF\u9006\u7684\uFF0C\u56E0\u6B64\u4E25\u683C\u610F\u4E49\u4E0A\u6765\u8BF4<strong>\u6458\u8981\u7B97\u6CD5\u4E0D\u5C5E\u4E8E\u52A0\u5BC6\u7B97\u6CD5</strong></p><p>\u5E38\u89C1\u7684\u6458\u8981\u7B97\u6CD5\u6709MD5\u3001SHA1\u7B49</p><h2 id="md5" tabindex="-1"><a class="header-anchor" href="#md5" aria-hidden="true">#</a> MD5</h2><p>MD5\uFF08Message Digest Algorithm 5\uFF09\u4E2D\u6587\u540D\u4E3A<code>\u6D88\u606F\u6458\u8981\u7B97\u6CD5\u7B2C\u4E94\u7248</code></p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">MD5Hash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> MD5<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashBytes <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8F6C\u6362\u4E3A\u5341\u516D\u8FDB\u5236\u5B57\u7B26\u4E32</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashHex <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashBytes<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hashHex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="sha1" tabindex="-1"><a class="header-anchor" href="#sha1" aria-hidden="true">#</a> SHA1</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">MD5Hash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hash <span class="token operator">=</span> SHA1<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashBytes <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8F6C\u6362\u4E3A\u5341\u516D\u8FDB\u5236\u5B57\u7B26\u4E32</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hashHex <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashBytes<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hashHex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><details class="custom-container details"><summary>\u5C0F\u6280\u5DE7</summary><p>\u4EE5\u4E0B\u4E24\u79CD\u65B9\u5F0F\u90FD\u53EF\u4EE5\u5C06\u5B57\u8282\u6570\u7EC4\u8F6C\u6362\u4E3A\u5341\u516D\u8FDB\u5236\u5B57\u7B26\u4E32</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> hashHex <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>hashBytes<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> hashHex <span class="token operator">=</span> hashBytes<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">current</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">next</span><span class="token format-string"><span class="token punctuation">:</span>X2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></details>`,11);function t(e,o){return p}var u=s(a,[["render",t]]);export{u as default};
